
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 11 19:15:22 CDT 2022
//----------------------------------------------------

package fes.aragon.compilador;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 11 19:15:22 CDT 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\003\003\000\002\002\004\000\002\004" +
    "\011\000\002\004\007\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\011\000" +
    "\002\004\007\000\002\004\010\000\002\004\006\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\010\000\002\004\006\000\002\004\003" +
    "\000\002\005\011\000\002\005\007\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\007\000\002\005\010\000\002\005\006\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\006\000\002\005\003\000\002\006\011\000" +
    "\002\006\007\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\011\000\002\006" +
    "\010\000\002\006\006\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\010\000" +
    "\002\006\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\024\003\011\005\013\006\015\007\006\011" +
    "\005\012\007\013\012\014\016\015\004\001\002\000\004" +
    "\016\234\001\002\000\004\004\233\001\002\000\004\004" +
    "\232\001\002\000\004\004\231\001\002\000\024\002\001" +
    "\005\202\006\177\007\204\011\176\012\200\013\175\014" +
    "\203\015\201\001\002\000\024\002\uffef\005\uffef\006\uffef" +
    "\007\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\001" +
    "\002\000\004\004\174\001\002\000\004\010\167\001\002" +
    "\000\004\002\166\001\002\000\004\010\163\001\002\000" +
    "\004\010\017\001\002\000\004\020\020\001\002\000\010" +
    "\004\uffd0\010\uffd0\016\uffd0\001\002\000\004\016\022\001" +
    "\002\000\022\003\030\005\032\006\033\007\026\011\024" +
    "\012\027\013\031\015\023\001\002\000\004\016\160\001" +
    "\002\000\004\004\157\001\002\000\022\005\055\006\052" +
    "\007\056\011\047\012\053\013\050\015\054\017\051\001" +
    "\002\000\004\004\046\001\002\000\004\004\045\001\002" +
    "\000\022\005\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\015\uffe0\017\uffe0\001\002\000\004\004\044\001\002" +
    "\000\004\010\037\001\002\000\004\010\034\001\002\000" +
    "\004\020\020\001\002\000\004\004\036\001\002\000\022" +
    "\005\uffe6\006\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6\015" +
    "\uffe6\017\uffe6\001\002\000\004\020\020\001\002\000\004" +
    "\010\041\001\002\000\004\020\020\001\002\000\004\004" +
    "\043\001\002\000\022\005\uffe7\006\uffe7\007\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\015\uffe7\017\uffe7\001\002\000\022\005" +
    "\uffe2\006\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2" +
    "\017\uffe2\001\002\000\022\005\uffe3\006\uffe3\007\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\015\uffe3\017\uffe3\001\002\000\022" +
    "\005\uffe5\006\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5\015" +
    "\uffe5\017\uffe5\001\002\000\004\004\156\001\002\000\004" +
    "\004\155\001\002\000\024\002\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\001\002" +
    "\000\004\010\152\001\002\000\004\004\151\001\002\000" +
    "\004\016\065\001\002\000\004\010\060\001\002\000\004" +
    "\004\057\001\002\000\022\005\uffec\006\uffec\007\uffec\011" +
    "\uffec\012\uffec\013\uffec\015\uffec\017\uffec\001\002\000\004" +
    "\020\020\001\002\000\004\010\062\001\002\000\004\020" +
    "\020\001\002\000\004\004\064\001\002\000\022\005\uffee" +
    "\006\uffee\007\uffee\011\uffee\012\uffee\013\uffee\015\uffee\017" +
    "\uffee\001\002\000\022\003\073\005\074\006\075\007\070" +
    "\011\066\012\071\013\072\014\076\001\002\000\004\004" +
    "\150\001\002\000\022\005\124\006\122\007\126\011\120" +
    "\012\123\013\117\014\125\017\121\001\002\000\004\004" +
    "\116\001\002\000\004\004\115\001\002\000\004\004\114" +
    "\001\002\000\022\005\uffd1\006\uffd1\007\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\017\uffd1\001\002\000\004\010\107" +
    "\001\002\000\004\010\104\001\002\000\004\010\077\001" +
    "\002\000\004\020\020\001\002\000\004\016\101\001\002" +
    "\000\022\003\030\005\032\006\033\007\026\011\024\012" +
    "\027\013\031\015\023\001\002\000\022\005\055\006\052" +
    "\007\056\011\047\012\053\013\050\015\054\017\103\001" +
    "\002\000\022\005\uffd2\006\uffd2\007\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\017\uffd2\001\002\000\004\020\020\001" +
    "\002\000\004\004\106\001\002\000\022\005\uffd7\006\uffd7" +
    "\007\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\017\uffd7\001" +
    "\002\000\004\020\020\001\002\000\004\010\111\001\002" +
    "\000\004\020\020\001\002\000\004\004\113\001\002\000" +
    "\022\005\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\017\uffd8\001\002\000\022\005\uffd3\006\uffd3\007" +
    "\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\017\uffd3\001\002" +
    "\000\022\005\uffd4\006\uffd4\007\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\017\uffd4\001\002\000\022\005\uffd6\006\uffd6" +
    "\007\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\017\uffd6\001" +
    "\002\000\004\004\147\001\002\000\004\004\146\001\002" +
    "\000\022\005\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\015\uffe8\017\uffe8\001\002\000\004\010\143\001\002" +
    "\000\004\004\142\001\002\000\004\010\135\001\002\000" +
    "\004\010\130\001\002\000\004\004\127\001\002\000\022" +
    "\005\uffdd\006\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\017\uffdd\001\002\000\004\020\020\001\002\000\004" +
    "\016\132\001\002\000\022\003\030\005\032\006\033\007" +
    "\026\011\024\012\027\013\031\015\023\001\002\000\022" +
    "\005\055\006\052\007\056\011\047\012\053\013\050\015" +
    "\054\017\134\001\002\000\022\005\uffd9\006\uffd9\007\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\017\uffd9\001\002\000" +
    "\004\020\020\001\002\000\004\010\137\001\002\000\004" +
    "\020\020\001\002\000\004\004\141\001\002\000\022\005" +
    "\uffdf\006\uffdf\007\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\017\uffdf\001\002\000\022\005\uffdb\006\uffdb\007\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\017\uffdb\001\002\000\004" +
    "\020\020\001\002\000\004\004\145\001\002\000\022\005" +
    "\uffde\006\uffde\007\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\017\uffde\001\002\000\022\005\uffdc\006\uffdc\007\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\017\uffdc\001\002\000\022" +
    "\005\uffda\006\uffda\007\uffda\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\017\uffda\001\002\000\022\005\uffd5\006\uffd5\007\uffd5" +
    "\011\uffd5\012\uffd5\013\uffd5\014\uffd5\017\uffd5\001\002\000" +
    "\022\005\uffea\006\uffea\007\uffea\011\uffea\012\uffea\013\uffea" +
    "\015\uffea\017\uffea\001\002\000\004\020\020\001\002\000" +
    "\004\004\154\001\002\000\022\005\uffed\006\uffed\007\uffed" +
    "\011\uffed\012\uffed\013\uffed\015\uffed\017\uffed\001\002\000" +
    "\022\005\uffe9\006\uffe9\007\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\015\uffe9\017\uffe9\001\002\000\022\005\uffeb\006\uffeb\007" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\017\uffeb\001\002" +
    "\000\022\005\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\015\uffe4\017\uffe4\001\002\000\022\003\073\005\074" +
    "\006\075\007\070\011\066\012\071\013\072\014\076\001" +
    "\002\000\022\005\124\006\122\007\126\011\120\012\123" +
    "\013\117\014\125\017\162\001\002\000\022\005\uffe1\006" +
    "\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1\017\uffe1" +
    "\001\002\000\004\020\020\001\002\000\004\004\165\001" +
    "\002\000\024\002\ufff6\005\ufff6\006\ufff6\007\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\015\ufff6\001\002\000\004\002" +
    "\000\001\002\000\004\020\020\001\002\000\004\010\171" +
    "\001\002\000\004\020\020\001\002\000\004\004\173\001" +
    "\002\000\024\002\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\015\ufff7\001\002\000\024\002" +
    "\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\001\002\000\004\004\230\001\002\000" +
    "\004\004\227\001\002\000\004\010\224\001\002\000\004" +
    "\004\223\001\002\000\004\016\220\001\002\000\004\010" +
    "\213\001\002\000\004\010\206\001\002\000\004\004\205" +
    "\001\002\000\024\002\ufffd\005\ufffd\006\ufffd\007\ufffd\011" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\001\002\000\004" +
    "\020\020\001\002\000\004\016\210\001\002\000\022\003" +
    "\030\005\032\006\033\007\026\011\024\012\027\013\031" +
    "\015\023\001\002\000\022\005\055\006\052\007\056\011" +
    "\047\012\053\013\050\015\054\017\212\001\002\000\024" +
    "\002\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\001\002\000\004\020\020\001\002" +
    "\000\004\010\215\001\002\000\004\020\020\001\002\000" +
    "\004\004\217\001\002\000\024\002\uffff\005\uffff\006\uffff" +
    "\007\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff\001" +
    "\002\000\022\003\073\005\074\006\075\007\070\011\066" +
    "\012\071\013\072\014\076\001\002\000\022\005\124\006" +
    "\122\007\126\011\120\012\123\013\117\014\125\017\222" +
    "\001\002\000\024\002\ufff8\005\ufff8\006\ufff8\007\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\001\002\000\024" +
    "\002\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\001\002\000\004\020\020\001\002" +
    "\000\004\004\226\001\002\000\024\002\ufffe\005\ufffe\006" +
    "\ufffe\007\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe" +
    "\001\002\000\024\002\ufffc\005\ufffc\006\ufffc\007\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\001\002\000\024" +
    "\002\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\001\002\000\024\002\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\001\002\000\024\002\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\001\002\000" +
    "\024\002\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\001\002\000\022\003\073\005" +
    "\074\006\075\007\070\011\066\012\071\013\072\014\076" +
    "\001\002\000\022\005\124\006\122\007\126\011\120\012" +
    "\123\013\117\014\125\017\236\001\002\000\024\002\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\006\003\013\004\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\037\001\001" +
    "\000\002\001\001\000\004\002\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\060\001\001\000\002\001\001\000\004" +
    "\002\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\077\001\001\000\002\001\001\000" +
    "\004\005\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\107\001\001\000\002\001\001\000\004" +
    "\002\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\130\001" +
    "\001\000\002\001\001\000\004\005\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\135\001\001\000" +
    "\002\001\001\000\004\002\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\167\001\001\000\002" +
    "\001\001\000\004\002\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\206\001\001\000\002\001" +
    "\001\000\004\005\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\213\001\001\000\002\001\001\000" +
    "\004\002\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\234\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static Lexico lex;
	public parser parserFuente;
   	
	public void syntax_error(Symbol st){
		JOptionPane.showMessageDialog(null, "Error en la linea "+ (lex.getYyline()+1) +
                    " columna: "+ lex.getYy_currentPos());
	}
	public void cargar(String archivo) throws Exception{	
		lex=new Lexico(new FileInputStream(new File(archivo)));
		parserFuente=new parser(lex);
		parserFuente.parse();			
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	public StringBuilder info = new StringBuilder();
	public Archivo archivoSalida=
    new Archivo(new File(System.getProperty("user.dir")+"/salida.fes"));
    
	public void almacenar(String datos,boolean valor){
		String[] intermedio  = datos.split("#"); 
		for (int i = 0; i < intermedio.length; i++) {
			//String string = intermedio[i];
			info.append(intermedio[i]+ "\n");
		}
		System.out.println(datos);
		archivoSalida.escribir(info,valor);
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // num ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT=n+"";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // lista3 ::= error 
            {
              String RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lista3 ::= REPETIR ESPACIO num LLAVEA lista2 LLAVEC 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String repeticiones = "";
	for (int i = 0; i < Integer.parseInt(n1+""); i++) {
		repeticiones += "#" + l2;			
	}
	RESULT = repeticiones;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lista3 ::= DERECHA PUNTOYCOMA 
            {
              String RESULT =null;
		
	RESULT=new String("derecha");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lista3 ::= IZQUIERDA PUNTOYCOMA 
            {
              String RESULT =null;
		
	RESULT=new String("izquierda");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista3 ::= ABAJO PUNTOYCOMA 
            {
              String RESULT =null;
		
	RESULT=new String("abajo");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lista3 ::= ARRIBA PUNTOYCOMA 
            {
              String RESULT =null;
		
	RESULT=new String("arriba");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lista3 ::= MOVER ESPACIO num PUNTOYCOMA 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=new String("mover " + n1);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista3 ::= COLOCA ESPACIO num ESPACIO num PUNTOYCOMA 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=new String("coloca " + n1 + " " + n2);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista3 ::= lista3 REPETIR ESPACIO num LLAVEA lista2 LLAVEC 
            {
              String RESULT =null;
		int l3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String l3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String repeticiones = "";
	for (int i = 0; i < Integer.parseInt(n1+""); i++) {
		repeticiones += "#" + l2;			
	}
	RESULT =l3 + repeticiones;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista3 ::= lista3 DERECHA PUNTOYCOMA 
            {
              String RESULT =null;
		int l3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT=l3 + "#" + "derecha";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista3 ::= lista3 IZQUIERDA PUNTOYCOMA 
            {
              String RESULT =null;
		int l3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT=l3 + "#" + "izquierda";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista3 ::= lista3 ABAJO PUNTOYCOMA 
            {
              String RESULT =null;
		int l3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT=l3 + "#" + "abajo";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista3 ::= lista3 ARRIBA PUNTOYCOMA 
            {
              String RESULT =null;
		int l3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT=l3 + "#" + "arriba";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista3 ::= lista3 MOVER ESPACIO num PUNTOYCOMA 
            {
              String RESULT =null;
		int l3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String l3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=l3 + "#" + "mover " + n1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista3 ::= lista3 COLOCA ESPACIO num ESPACIO num PUNTOYCOMA 
            {
              String RESULT =null;
		int l3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String l3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=l3 + "#" + "coloca " + n1 + " " + n2;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista2 ::= error 
            {
              String RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista2 ::= VERFRUTA LLAVEA lista3 LLAVEC 
            {
              String RESULT =null;
		int l3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT="ver " + "#" + "{" + "#" + l3 + "#" + "}";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista2 ::= DERECHA PUNTOYCOMA 
            {
              String RESULT =null;
		
	RESULT=new String("derecha");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista2 ::= IZQUIERDA PUNTOYCOMA 
            {
              String RESULT =null;
		
	RESULT=new String("izquierda");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista2 ::= ABAJO PUNTOYCOMA 
            {
              String RESULT =null;
		
	RESULT=new String("abajo");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista2 ::= ARRIBA PUNTOYCOMA 
            {
              String RESULT =null;
		
	RESULT=new String("arriba");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista2 ::= MOVER ESPACIO num PUNTOYCOMA 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=new String("mover " + n1);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista2 ::= COLOCA ESPACIO num ESPACIO num PUNTOYCOMA 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=new String("coloca " + n1 + " " + n2);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista2 ::= lista2 VERFRUTA LLAVEA lista3 LLAVEC 
            {
              String RESULT =null;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int l3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT= l2 + "#" + "ver " + "#" + "{" + "#" + l3 + "#" + "}";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista2 ::= lista2 DERECHA PUNTOYCOMA 
            {
              String RESULT =null;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT=l2 + "#" + "derecha";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista2 ::= lista2 IZQUIERDA PUNTOYCOMA 
            {
              String RESULT =null;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT=l2 + "#" + "izquierda";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista2 ::= lista2 ABAJO PUNTOYCOMA 
            {
              String RESULT =null;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT=l2 + "#" + "abajo";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista2 ::= lista2 ARRIBA PUNTOYCOMA 
            {
              String RESULT =null;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT=l2 + "#" + "arriba";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista2 ::= lista2 MOVER ESPACIO num PUNTOYCOMA 
            {
              String RESULT =null;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=l2 +"#" + "mover " + n1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista2 ::= lista2 COLOCA ESPACIO num ESPACIO num PUNTOYCOMA 
            {
              String RESULT =null;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=l2 + "#" + "coloca " + n1 + " " +  n2;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista ::= error 
            {
              String RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista ::= VERFRUTA LLAVEA lista3 LLAVEC 
            {
              String RESULT =null;
		int l3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT="ver " + "#" + "{" + "#" + l3 + "#" + "}";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista ::= REPETIR ESPACIO num LLAVEA lista2 LLAVEC 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String repeticiones = "";
	for (int i = 0; i < Integer.parseInt(n1+""); i++) {
		repeticiones += "#" + l2;			
	}
	RESULT = repeticiones;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista ::= DERECHA PUNTOYCOMA 
            {
              String RESULT =null;
		
	RESULT=new String("derecha");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista ::= IZQUIERDA PUNTOYCOMA 
            {
              String RESULT =null;
		
	RESULT=new String("izquierda");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista ::= ABAJO PUNTOYCOMA 
            {
              String RESULT =null;
		
	RESULT=new String("abajo");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista ::= ARRIBA PUNTOYCOMA 
            {
              String RESULT =null;
		
	RESULT=new String("arriba");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista ::= MOVER ESPACIO num PUNTOYCOMA 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=new String("mover " + n1);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista ::= COLOCA ESPACIO num ESPACIO num PUNTOYCOMA 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=new String("coloca " + n1 + " " + n2);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista ::= lista VERFRUTA LLAVEA lista3 LLAVEC 
            {
              String RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int l3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=l1 + "#" + "ver " + "#" + "{" + "#" + l3 + "#" + "}";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista ::= lista REPETIR ESPACIO num LLAVEA lista2 LLAVEC 
            {
              String RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String repeticiones = "";
	for (int i = 0; i < Integer.parseInt(n1+""); i++) {
		repeticiones += "#" + l2;			
	}
	RESULT = l1 + repeticiones;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista ::= lista DERECHA PUNTOYCOMA 
            {
              String RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT=l1 + "#" + "derecha";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista ::= lista IZQUIERDA PUNTOYCOMA 
            {
              String RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT=l1 + "#" + "izquierda";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista ::= lista ABAJO PUNTOYCOMA 
            {
              String RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT=l1 + "#" + "abajo";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista ::= lista ARRIBA PUNTOYCOMA 
            {
              String RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	RESULT=l1 + "#" + "arriba";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista ::= lista MOVER ESPACIO num PUNTOYCOMA 
            {
              String RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=l1 +"#" + "mover " + n1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista ::= lista COLOCA ESPACIO num ESPACIO num PUNTOYCOMA 
            {
              String RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT=l1 + "#" + "coloca " + n1 + " " +  n2;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= codigo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // codigo ::= lista 
            {
              Object RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	almacenar(l1+"",false);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

