
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 13 12:00:45 CDT 2022
//----------------------------------------------------

package fes.aragon.compilador;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 13 12:00:45 CDT 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\011\000\002\003\007\000\002\003\004" +
    "\000\002\003\010\000\002\003\006\000\002\003\003\000" +
    "\002\004\005\000\002\004\007\000\002\004\004\000\002" +
    "\004\006\000\002\004\003\000\002\005\005\000\002\005" +
    "\011\000\002\005\004\000\002\005\010\000\002\005\003" +
    "\000\002\007\007\000\002\007\005\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\024\003\011\005\013\006\016\007\006\011" +
    "\005\012\007\013\012\014\017\015\004\001\002\000\004" +
    "\016\111\001\002\000\004\004\uffeb\001\002\000\004\004" +
    "\uffec\001\002\000\004\004\uffea\001\002\000\004\004\110" +
    "\001\002\000\030\002\ufff9\003\ufff9\004\uffe8\005\ufff9\006" +
    "\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\001\002\000\004\004\uffe9\001\002\000\004\010\104\001" +
    "\002\000\026\002\001\003\033\005\013\006\016\007\006" +
    "\011\005\012\007\013\012\014\072\015\070\001\002\000" +
    "\004\002\067\001\002\000\004\010\065\001\002\000\004" +
    "\020\020\001\002\000\010\004\uffe7\010\uffe7\016\uffe7\001" +
    "\002\000\004\010\022\001\002\000\004\016\023\001\002" +
    "\000\022\003\026\005\013\006\016\007\006\011\005\012" +
    "\007\013\012\015\024\001\002\000\004\016\062\001\002" +
    "\000\004\004\061\001\002\000\026\003\ufff4\004\uffe8\005" +
    "\ufff4\006\ufff4\007\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4" +
    "\017\ufff4\001\002\000\024\003\033\005\013\006\016\007" +
    "\006\011\005\012\007\013\012\015\030\017\032\001\002" +
    "\000\004\016\035\001\002\000\004\004\034\001\002\000" +
    "\026\002\ufffb\003\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\015\ufffb\001\002\000\004\004" +
    "\uffe8\001\002\000\024\003\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\015\ufff8\017\ufff8\001\002\000" +
    "\022\003\037\005\013\006\016\007\006\011\005\012\007" +
    "\013\012\014\041\001\002\000\004\004\060\001\002\000" +
    "\026\003\uffef\004\uffe8\005\uffef\006\uffef\007\uffef\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\017\uffef\001\002\000\024\003" +
    "\033\005\013\006\016\007\006\011\005\012\007\013\012" +
    "\014\051\017\050\001\002\000\004\010\042\001\002\000" +
    "\004\020\020\001\002\000\004\016\044\001\002\000\022" +
    "\003\026\005\013\006\016\007\006\011\005\012\007\013" +
    "\012\015\024\001\002\000\024\003\033\005\013\006\016" +
    "\007\006\011\005\012\007\013\012\015\030\017\046\001" +
    "\002\000\024\003\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\017\ufff0\001\002\000\004\004" +
    "\057\001\002\000\024\003\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\015\ufff7\017\ufff7\001\002\000" +
    "\004\010\052\001\002\000\004\020\020\001\002\000\004" +
    "\016\054\001\002\000\022\003\026\005\013\006\016\007" +
    "\006\011\005\012\007\013\012\015\024\001\002\000\024" +
    "\003\033\005\013\006\016\007\006\011\005\012\007\013" +
    "\012\015\030\017\056\001\002\000\024\003\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\017" +
    "\ufff2\001\002\000\024\003\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\014\ufff3\017\ufff3\001\002\000" +
    "\024\003\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\017\ufff1\001\002\000\024\003\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6" +
    "\017\ufff6\001\002\000\022\003\037\005\013\006\016\007" +
    "\006\011\005\012\007\013\012\014\041\001\002\000\024" +
    "\003\033\005\013\006\016\007\006\011\005\012\007\013" +
    "\012\014\051\017\064\001\002\000\024\003\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\011\ufff5\012\ufff5\013\ufff5\015\ufff5\017" +
    "\ufff5\001\002\000\004\020\020\001\002\000\004\004\uffed" +
    "\001\002\000\004\002\000\001\002\000\004\016\101\001" +
    "\002\000\004\004\100\001\002\000\004\010\073\001\002" +
    "\000\004\020\020\001\002\000\004\016\075\001\002\000" +
    "\022\003\026\005\013\006\016\007\006\011\005\012\007" +
    "\013\012\015\024\001\002\000\024\003\033\005\013\006" +
    "\016\007\006\011\005\012\007\013\012\015\030\017\077" +
    "\001\002\000\026\002\ufffe\003\ufffe\005\ufffe\006\ufffe\007" +
    "\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\001\002" +
    "\000\026\002\uffff\003\uffff\005\uffff\006\uffff\007\uffff\011" +
    "\uffff\012\uffff\013\uffff\014\uffff\015\uffff\001\002\000\022" +
    "\003\037\005\013\006\016\007\006\011\005\012\007\013" +
    "\012\014\041\001\002\000\024\003\033\005\013\006\016" +
    "\007\006\011\005\012\007\013\012\014\051\017\103\001" +
    "\002\000\026\002\ufffd\003\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\001\002\000" +
    "\004\020\020\001\002\000\004\010\106\001\002\000\004" +
    "\020\020\001\002\000\004\004\uffee\001\002\000\026\002" +
    "\ufffc\003\ufffc\005\ufffc\006\ufffc\007\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\001\002\000\022\003\037\005" +
    "\013\006\016\007\006\011\005\012\007\013\012\014\041" +
    "\001\002\000\024\003\033\005\013\006\016\007\006\011" +
    "\005\012\007\013\012\014\051\017\113\001\002\000\026" +
    "\002\ufffa\003\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\010\002\014\003\013\007\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\026\007\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\037\007\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\046\001" +
    "\001\000\002\001\001\000\004\006\042\001\001\000\002" +
    "\001\001\000\006\004\044\007\024\001\001\000\004\007" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\052\001\001\000" +
    "\002\001\001\000\006\004\054\007\024\001\001\000\004" +
    "\007\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\062\007\035" +
    "\001\001\000\004\007\046\001\001\000\002\001\001\000" +
    "\004\006\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\073\001\001\000\002\001\001\000\006\004\075" +
    "\007\024\001\001\000\004\007\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\101\007\035\001\001" +
    "\000\004\007\046\001\001\000\002\001\001\000\004\006" +
    "\104\001\001\000\002\001\001\000\004\006\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\111\007" +
    "\035\001\001\000\004\007\046\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static Lexico lex;
	public parser parserFuente;
   	
	public void syntax_error(Symbol st){
		JOptionPane.showMessageDialog(null, "Error en la linea "+ (lex.getYyline()+1) +
                    " columna: "+ lex.getYy_currentPos());
	}
	public void cargar(String archivo) throws Exception{	
		lex=new Lexico(new FileInputStream(new File(archivo)));
		parserFuente=new parser(lex);
		parserFuente.parse();			
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	public StringBuilder info = new StringBuilder();
	public Archivo archivoSalida=
    new Archivo(new File(System.getProperty("user.dir")+"/salida.fes"));
    
	public void almacenar(String datos,boolean valor){
		String[] intermedio  = datos.split("#"); 
		for (int i = 0; i < intermedio.length; i++) {
			//String string = intermedio[i];
			info.append(intermedio[i]+ "\n");
		}
		System.out.println(datos);
		archivoSalida.escribir(info,valor);
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // num ::= NUMERO 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=n+"";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ins ::= error 
            {
              String RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ins ::= DERECHA 
            {
              String RESULT =null;
		RESULT=new String("derecha");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ins ::= IZQUIERDA 
            {
              String RESULT =null;
		RESULT=new String("izquierda");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ins ::= ABAJO 
            {
              String RESULT =null;
		RESULT=new String("abajo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ins ::= ARRIBA 
            {
              String RESULT =null;
		RESULT=new String("arriba");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ins ::= MOVER ESPACIO num 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new String("mover " + n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ins ::= COLOCA ESPACIO num ESPACIO num 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new String("coloca " + n + " " + n1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // algoritmo3 ::= error 
            {
              String RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // algoritmo3 ::= REPETIR ESPACIO num LLAVEA algoritmo2 LLAVEC 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int al2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int al2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String al2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String repeticiones = "";
	for (int i = 0; i < Integer.parseInt(n+""); i++) {
		repeticiones += "#" + al2;			
	}
	RESULT = repeticiones;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // algoritmo3 ::= ins PUNTOYCOMA 
            {
              String RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=in;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // algoritmo3 ::= algoritmo3 REPETIR ESPACIO num LLAVEA algoritmo2 LLAVEC 
            {
              String RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int al2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int al2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String al2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String repeticiones = "";
	for (int i = 0; i < Integer.parseInt(n+""); i++) {
		repeticiones += "#" + al2;			
	}
	RESULT = al + repeticiones;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // algoritmo3 ::= algoritmo3 ins PUNTOYCOMA 
            {
              String RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=al + "#" + in;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // algoritmo2 ::= error 
            {
              String RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // algoritmo2 ::= VERFRUTA LLAVEA algoritmo3 LLAVEC 
            {
              String RESULT =null;
		int al3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int al3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String al3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="ver " + "#" + "{" + "#" + al3 + "#" + "}";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // algoritmo2 ::= ins PUNTOYCOMA 
            {
              String RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=in;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // algoritmo2 ::= algoritmo2 VERFRUTA LLAVEA algoritmo3 LLAVEC 
            {
              String RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int al3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int al3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String al3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=al + "#" + "ver " + "#" + "{" + "#" + al3 + "#" + "}";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // algoritmo2 ::= algoritmo2 ins PUNTOYCOMA 
            {
              String RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=al + "#" + in;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // algoritmo ::= error 
            {
              String RESULT =null;
		;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // algoritmo ::= VERFRUTA LLAVEA algoritmo3 LLAVEC 
            {
              String RESULT =null;
		int al3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int al3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String al3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT="ver " + "#" + "{" + "#" + al3 + "#" + "}";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // algoritmo ::= REPETIR num ESPACIO LLAVEA algoritmo2 LLAVEC 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int al2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int al2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String al2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String repeticiones = "";
	for (int i = 0; i < Integer.parseInt(n+""); i++) {
		repeticiones += "#" + al2;			
	}
	RESULT = repeticiones;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // algoritmo ::= ins PUNTOYCOMA 
            {
              String RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=in;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // algoritmo ::= algoritmo VERFRUTA LLAVEA algoritmo3 LLAVEC 
            {
              String RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int al3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int al3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String al3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=al + "#" + "ver " + "#" + "{" + "#" + al3 + "#" + "}";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // algoritmo ::= algoritmo REPETIR ESPACIO num LLAVEA algoritmo2 LLAVEC 
            {
              String RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int al2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int al2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String al2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	String repeticiones = "";
	for (int i = 0; i < Integer.parseInt(n+""); i++) {
		repeticiones += "#" + al2;			
	}
	RESULT = al + repeticiones;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // algoritmo ::= algoritmo ins PUNTOYCOMA 
            {
              String RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=al + "#" + in;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algoritmo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= codigo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // codigo ::= algoritmo 
            {
              Object RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		almacenar(al + "",false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

