package fes.aragon.compilador;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;

action code{:
	public StringBuilder info = new StringBuilder();
	public Archivo archivoSalida=
    new Archivo(new File(System.getProperty("user.dir")+"/salida.fes"));
    
	public void almacenar(String datos,boolean valor){
		String[] intermedio  = datos.split("#"); 
		for (int i = 0; i < intermedio.length; i++) {
			if (!intermedio[i].equals("")) {
				info.append(intermedio[i]+ "\n");
			}
		}
		System.out.println(datos);
		archivoSalida.escribir(info,valor);
		Boolean existe = false;
		for (int i = 0; i < intermedio.length; i++) {
			if (intermedio[i].equals("null")) {
				existe = true;
			}
		}
		if (datos.equals("null")) {
			JOptionPane.showMessageDialog(null, "ERROR\nCodigo intermedio no generado.");
		} else if (existe) {
			JOptionPane.showMessageDialog(null, "ADVERTENCIA\nCodigo intermedio generado pero con errores.\nNO PROCEDA con correrlo.");
		} else {
			JOptionPane.showMessageDialog(null, "ACEPTADO\nCodigo intermedio generado.");
		}
	}
:};

parser code{:
	public static Lexico lex;
	public parser parserFuente;
   	
	public void syntax_error(Symbol st){
		JOptionPane.showMessageDialog(null, "Error en la linea "+ (lex.getYyline()+1) +
                    " columna: "+ lex.getYy_currentPos());
	}
	public void cargar(String archivo) throws Exception{	
		lex=new Lexico(new FileInputStream(new File(archivo)));
		parserFuente=new parser(lex);
		parserFuente.parse();			
	}
	
:};

terminal PUNTOYCOMA, COLOCA, MOVER, ARRIBA, ESPACIO;
terminal ABAJO, IZQUIERDA, DERECHA, REPETIR, VERFRUTA;
terminal LLAVEA, LLAVEC;
terminal Integer NUMERO;

non terminal codigo;
non terminal String algoritmo, algoritmo2, algoritmo3, num, ins;


codigo ::= algoritmo:al {:almacenar(al + "",false);:};
	
algoritmo ::= algoritmo:al ins:in PUNTOYCOMA {:RESULT=al + "#" + in;:}
	|algoritmo:al REPETIR ESPACIO num:n LLAVEA algoritmo2:al2 LLAVEC {:
	String repeticiones = "";
	for (int i = 0; i < Integer.parseInt(n+""); i++) {
		repeticiones += "#" + al2;			
	}
	RESULT = al + repeticiones;
	:}
	|algoritmo:al VERFRUTA LLAVEA algoritmo3:al3 LLAVEC {:RESULT=al + "#" + "ver " + "#" + "{" + "#" + al3 + "#" + "}";:}
	|ins:in PUNTOYCOMA {:RESULT=in;:}
	|REPETIR ESPACIO num:n LLAVEA algoritmo2:al2 LLAVEC {:
	String repeticiones = "";
	for (int i = 0; i < Integer.parseInt(n+""); i++) {
		repeticiones += "#" + al2;			
	}
	RESULT = repeticiones;
	:}
	|VERFRUTA LLAVEA algoritmo3:al3 LLAVEC {:RESULT="ver " + "#" + "{" + "#" + al3 + "#" + "}";:}
	|error{:;:};
	
algoritmo2 ::= algoritmo2:al ins:in PUNTOYCOMA {:RESULT=al + "#" + in;:}
	|algoritmo2:al VERFRUTA LLAVEA algoritmo3:al3 LLAVEC {:RESULT=al + "#" + "ver " + "#" + "{" + "#" + al3 + "#" + "}";:}
	|ins:in PUNTOYCOMA {:RESULT=in;:}
	|VERFRUTA LLAVEA algoritmo3:al3 LLAVEC {:RESULT="ver " + "#" + "{" + "#" + al3 + "#" + "}";:}
	|error{:;:};
	
algoritmo3 ::= algoritmo3:al ins:in PUNTOYCOMA {:RESULT=al + "#" + in;:}
	|algoritmo3:al REPETIR ESPACIO num:n LLAVEA algoritmo2:al2 LLAVEC {:
	String repeticiones = "";
	for (int i = 0; i < Integer.parseInt(n+""); i++) {
		repeticiones += "#" + al2;			
	}
	RESULT = al + repeticiones;
	:}
	|ins:in PUNTOYCOMA {:RESULT=in;:}
	|REPETIR ESPACIO num:n LLAVEA algoritmo2:al2 LLAVEC {:
	String repeticiones = "";
	for (int i = 0; i < Integer.parseInt(n+""); i++) {
		repeticiones += "#" + al2;			
	}
	RESULT = repeticiones;
	:}
	|error{:;:};

ins ::= COLOCA ESPACIO num:n ESPACIO num:n1 {:RESULT=new String("coloca " + n + " " + n1);:}
	|MOVER ESPACIO num:n {:RESULT=new String("mover " + n);:}
	|ARRIBA {:RESULT=new String("arriba");:}
	|ABAJO {:RESULT=new String("abajo");:}
	|IZQUIERDA {:RESULT=new String("izquierda");:} 
	|DERECHA {:RESULT=new String("derecha");:}
	|error{:;:};

num ::= NUMERO:n {:RESULT=n+"";:};